{"version":3,"sources":["logo.svg","gameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","state","handle","bind","this","colour","action","row","column","setState","player","class","onClick","React","Component","Display","winner","displayWinner","Grid","createRow","rowNum","columnNum","playerTurn","handler","verifyValidMove","chngPlayerTurn","chngCellValue","movesMade","grid","newState","newGrid","i","j","updatedMoves","moves","id","App","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.98d64ad1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './gameBoard.css';\n\n//This class represents an indiivual cell in the game board\nclass Cell extends React.Component {\n    constructor(props)\n    {\n      super(props);\n      this.state = {'colour':'_______'};\n      this.handle = this.handle.bind(this);\n    }\n    //Set the cell to the colour of the player who clicked on it\n    handle () {\n        //if the cell has already been clicked do not chnage its colour\n        if (this.state.colour == 'Red' || this.state.colour == 'Yellow')\n          return;  \n        else {\n            let value = this.props.action (this.props.row, this.props.column);\n            if (value)\n            this.setState( {'colour' : this.props.player});\n        }\n\n    }\n \n    render()\n    {\n      return (\n        <button class = 'button' onClick = {this.handle}>\n          {this.state.colour}\n        </button>\n      );\n    }\n\n}\n\n//This class represents the winner display label at the end of the game\nclass Display extends React.Component {\n    constructor(props)\n    {\n        super(props);\n    }\n    //If the winner has been set to Red, Yellow, or Draw, display the winner \n    displayWinner () {\n        if (this.props.winner != '')\n            return 'The winner is: ' + this.props.winner + \". Click refresh to play again!\"\n    }\n    render () {\n        return (\n            <label>\n                {this.displayWinner()}\n            </label>\n        );\n    }\n\n}\n\nclass Grid extends React.Component {\n    constructor (props)\n    {\n        super(props);\n        this.state = {\n            playerTurn: 'Red',\n            grid: [\n                [0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0],\n                [0,0,0,0,0,0,0]\n            ],\n            winner: '',\n            moves: 1\n        }\n    }\n    //Creates a row with seven columns\n    createRow = (rowNum) => {\n        let columnNum = 0;\n        return (\n            <div>\n            <Cell row = {rowNum} column = {columnNum} player = {this.state.playerTurn} action = {this.handler} />\n            <Cell row = {rowNum} column = {columnNum = columnNum +1} player = {this.state.playerTurn} action = {this.handler} />\n            <Cell row = {rowNum} column = {columnNum = columnNum +1} player = {this.state.playerTurn} action = {this.handler} />\n            <Cell row = {rowNum} column = {columnNum = columnNum +1} player = {this.state.playerTurn} action = {this.handler} />\n            <Cell row = {rowNum} column = {columnNum = columnNum +1} player = {this.state.playerTurn} action = {this.handler} />\n            <Cell row = {rowNum} column = {columnNum = columnNum +1}  player = {this.state.playerTurn} action = {this.handler} />\n            <Cell row = {rowNum} column = {columnNum = columnNum +1} player = {this.state.playerTurn} action = {this.handler} />\n            </div>\n        );\n    }\n    //Return true if a valid move was made, else return false\n    handler = (rowNum, columnNum) => {\n        if (this.verifyValidMove(rowNum, columnNum)){\n            this.chngPlayerTurn();\n            this.chngCellValue(rowNum, columnNum);\n            this.winner();\n            this.movesMade();\n            return true;\n        }\n        return false;\n    }\n\n    //Fllowing the rules of gravity, peices can only be added to the bottom row or on top of previously places peices.\n    //Also, don't allow more moves after a winner has been decided.\n    verifyValidMove = (rowNum, columnNum) => {\n        if (this.state.winner != '')\n            return false;\n        else if (rowNum == 5)\n            return true;\n        else if (this.state.grid[rowNum + 1][columnNum] != 0)\n            return true;\n        else\n            return false\n    }\n    //Change player turn from red to yellow and vice versa\n    chngPlayerTurn = () => {\n                let newState = (this.state.playerTurn === 'Red')? 'Yellow' : 'Red';\n                this.setState( {'playerTurn' : newState});\n    }\n\n    //Set the value of the chosen cell in the grid to 1 for Red and -1 for Yellow\n    chngCellValue = (rowNum, columnNum) =>{\n                if (this.state.playerTurn ==='Red'){\n                    let newGrid = this.state.grid;\n                    newGrid[rowNum][columnNum] = 1;\n                    this.setState({'grid' : newGrid});\n                }\n                if (this.state.playerTurn ==='Yellow'){\n                    let newGrid = this.state.grid;\n                    newGrid[rowNum][columnNum] = -1;\n                    this.setState({'grid' : newGrid});\n                }\n    }\n    //Check if there is a connect 4; if there is set winner state to the appropriate colour\n    winner = () => {\n                //Check for horizontal connect4\n                for (let i =0; i<6; i++){\n                    for (let j=0; j<4; j++){\n                        if (((this.state.grid[i][j] + this.state.grid[i][j+1] + this.state.grid[i][j+2] + this.state.grid[i][j+3]) >3)){\n                            this.setState({winner: 'Red'});\n                            break;\n                        }\n                        if (((this.state.grid[i][j] + this.state.grid[i][j+1] + this.state.grid[i][j+2] + this.state.grid[i][j+3]) < -3)){\n                            this.setState({winner: 'Yellow'});\n                            break;\n                        }\n                    }\n                    if (this.state.winner != '')\n                        break;\n                }\n                //check for vertical connect4\n                for (let j =0; j<7; j++){\n                    for (let i=0; i<3; i++){\n                        if (((this.state.grid[i][j] + this.state.grid[i+1][j] + this.state.grid[i+2][j] + this.state.grid[i+3][j]) >3)){\n                            this.setState({winner: 'Red'});\n                            break;\n                        }  \n                        if (((this.state.grid[i][j] + this.state.grid[i+1][j] + this.state.grid[i+2][j] + this.state.grid[i+3][j]) <-3)){\n                            this.setState({winner: 'Yellow'});\n                            break;\n                        }  \n                    }\n                }\n        \n                //check for diagonal (down to the right) connect4\n                for (let i =0; i<3; i++){\n                    for (let j=0; j<4; j++){\n                        if (((this.state.grid[i][j] + this.state.grid[i+1][j+1] + this.state.grid[i+2][j+2] + this.state.grid[i+3][j+3]) >3)){\n                            this.setState({winner: 'Red'});\n                            break;\n                        }\n                        if (((this.state.grid[i][j] + this.state.grid[i+1][j+1] + this.state.grid[i+2][j+2] + this.state.grid[i+3][j+3]) <-3)){\n                            this.setState({winner: 'Yellow'});\n                            break;\n                        }\n                    }\n                }\n                //check for diagonal (up to the right) connect4\n                for (let i =5; i>2; i--){\n                    for (let j=0; j<4; j++){\n                        if (((this.state.grid[i][j] + this.state.grid[i-1][j+1] + this.state.grid[i-2][j+2] + this.state.grid[i-3][j+3]) >3)){\n                            this.setState({winner: 'Red'});\n                            break;\n                        }\n                        if (((this.state.grid[i][j] + this.state.grid[i-1][j+1] + this.state.grid[i-2][j+2] + this.state.grid[i-3][j+3]) < -3)){\n                            this.setState({winner: 'Yellow'});\n                            break;\n                        }\n                    }\n                }                    \n    }\n\n    //Countthe number of moves made and declare a draw if the board is full\n    movesMade = () => {\n        let updatedMoves = this.state.moves +1;\n        this.setState({'moves': updatedMoves});\n        if (this.state.moves == 42 && this.state.winner == '')\n        this.setState({winner: 'Nobody, the board is full.'});\n    }\n\n    render ()\n    {\n        return (\n            <div id = 'connect4'>\n                <div id='displayDiv'>\n                    <Display winner = {this.state.winner}/>\n                </div>\n                <div id = 'grid'>\n                    <div id = 'row0'>\n                        {this.createRow(0)}\n                    </div>\n                    <div id = 'row1'>\n                        {this.createRow(1)}\n                    </div>                \n                    <div id = 'row2'>\n                        {this.createRow(2)}\n                    </div>                \n                    <div id = 'row3'>\n                        {this.createRow(3)}\n                    </div>                \n                    <div id = 'row4'>\n                        {this.createRow(4)}\n                    </div>                \n                    <div id = 'row5'>\n                        {this.createRow(5)}\n                    </div> \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Grid;\n","import logo from './logo.svg';\nimport './App.css';\nimport Grid from './gameBoard';\nimport ReactDOM  from 'react-dom';\n\nfunction App() {\n  return (\n    <button onClick={()=> {ReactDOM.render(<Grid/>, document.getElementById('root'))}}>\n    Click to play!\n  </button>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}